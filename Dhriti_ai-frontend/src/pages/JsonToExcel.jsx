import React, { useEffect, useMemo, useState } from 'react';
import Sidebar from '../components/Sidebar.jsx';
import Topbar from '../components/Topbar.jsx';
import { getToken } from '../utils/auth.js';

const API_BASE = 'http://localhost:8000';

function JsonToExcel() {
  const [file, setFile] = useState(null);
  const [sheetName, setSheetName] = useState('Sheet1');
  const [recordsKey, setRecordsKey] = useState('');
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(false);
  const [downloadUrl, setDownloadUrl] = useState('');
  const [downloadName, setDownloadName] = useState('converted.xlsx');

  useEffect(() => {
    return () => {
      if (downloadUrl) {
        URL.revokeObjectURL(downloadUrl);
      }
    };
  }, [downloadUrl]);

  const formDisabled = useMemo(() => loading, [loading]);

  const handleFileChange = event => {
    const nextFile = event.target.files?.[0];
    setFile(nextFile ?? null);
    setDownloadUrl('');
    setError('');
  };

  const handleSubmit = async event => {
    event.preventDefault();
    if (!file) {
      setError('Please choose a JSON file to upload.');
      return;
    }

    setError('');
    setDownloadUrl('');
    setLoading(true);

    try {
      const token = getToken();
      if (!token) {
        throw new Error('Session expired. Please log in again.');
      }

      const formData = new FormData();
      formData.append('file', file);

      if (sheetName && sheetName.trim()) {
        formData.append('sheet_name', sheetName.trim());
      }
      if (recordsKey && recordsKey.trim()) {
        formData.append('records_key', recordsKey.trim());
      }

      const response = await fetch(`${API_BASE}/tasks/admin/json-to-excel`, {
        method: 'POST',
        headers: {
          Authorization: `Bearer ${token}`,
        },
        body: formData,
      });

      if (!response.ok) {
        let detail = 'Failed to convert file.';
        try {
          const payload = await response.json();
          detail = payload.detail || detail;
        } catch (_) {
          // Ignore body parse errors; fall back to default.
        }
        throw new Error(detail);
      }

      const blob = await response.blob();
      const url = URL.createObjectURL(blob);
      setDownloadUrl(url);

      const disposition = response.headers.get('Content-Disposition');
      if (disposition) {
        const filenameMatch = disposition
          .split(';')
          .map(part => part.trim())
          .find(part => part.toLowerCase().startsWith('filename='));
        if (filenameMatch) {
          const rawName = filenameMatch.split('=').slice(1).join('=').trim();
          setDownloadName(rawName.replaceAll('"', '') || 'converted.xlsx');
        }
      } else {
        setDownloadName(`${file.name.replace(/\.json$/i, '') || 'converted'}.xlsx`);
      }
    } catch (err) {
      setError(err.message);
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="min-h-screen bg-slate-50 md:flex">
      <Sidebar />
      <main className="flex-1 min-w-0">
        <Topbar />
        <div className="p-4 md:p-6 space-y-6">
          <div className="space-y-1">
            <h1 className="text-2xl font-semibold text-slate-800">JSON to Excel</h1>
            <p className="text-sm text-slate-600">
              Upload a JSON payload and download the flattened Excel file generated by the backend converter.
            </p>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6 rounded-2xl border border-slate-200 bg-white p-5 shadow-sm">
            <section className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-slate-700">JSON file</label>
                <input
                  type="file"
                  accept=".json,application/json"
                  onChange={handleFileChange}
                  disabled={formDisabled}
                  className="mt-2 block w-full text-sm text-slate-600 file:mr-4 file:rounded-md file:border file:border-slate-200 file:bg-white file:px-3 file:py-2 file:text-sm file:font-semibold file:text-slate-700 hover:file:bg-slate-50"
                />
                <p className="mt-1 text-xs text-slate-500">
                  JSON should either be a list of objects or an object containing an array (provide its key below).
                </p>
              </div>

              <div className="grid gap-4 md:grid-cols-2">
                <div>
                  <label className="block text-sm font-medium text-slate-700">Sheet name</label>
                  <input
                    value={sheetName}
                    onChange={event => setSheetName(event.target.value)}
                    disabled={formDisabled}
                    placeholder="Sheet1"
                    className="mt-2 w-full rounded-lg border border-slate-200 px-3 py-2 text-sm focus:border-slate-400 focus:outline-none disabled:bg-slate-100"
                  />
                </div>
                <div>
                  <label className="block text-sm font-medium text-slate-700">Records key (optional)</label>
                  <input
                    value={recordsKey}
                    onChange={event => setRecordsKey(event.target.value)}
                    disabled={formDisabled}
                    placeholder="e.g. workItems"
                    className="mt-2 w-full rounded-lg border border-slate-200 px-3 py-2 text-sm focus:border-slate-400 focus:outline-none disabled:bg-slate-100"
                  />
                  <p className="mt-1 text-xs text-slate-500">
                    Use when your JSON object wraps the list under a key (e.g. &#123;&#34;workItems&#34;: [&#8230;]&#125;).
                  </p>
                </div>
              </div>
            </section>

            {error ? (
              <div className="rounded-lg border border-red-200 bg-red-50 px-3 py-2 text-sm text-red-700">{error}</div>
            ) : null}

            {downloadUrl ? (
              <div className="rounded-lg border border-emerald-200 bg-emerald-50 px-3 py-2 text-sm text-emerald-700">
                Conversion complete.{' '}
                <a
                  href={downloadUrl}
                  download={downloadName}
                  className="font-medium underline"
                >
                  Download {downloadName}
                </a>
              </div>
            ) : null}

            <div className="flex items-center gap-3">
              <button
                type="submit"
                disabled={formDisabled}
                className="inline-flex items-center justify-center rounded-lg bg-brand-600 px-4 py-2 text-sm font-medium text-white shadow-sm transition hover:bg-brand-700 disabled:cursor-not-allowed disabled:bg-slate-300"
              >
                {loading ? 'Convertingâ€¦' : 'Convert to Excel'}
              </button>
              {file ? <span className="text-xs text-slate-500">Selected: {file.name}</span> : null}
            </div>
          </form>
        </div>
      </main>
    </div>
  );
}

export default JsonToExcel;

